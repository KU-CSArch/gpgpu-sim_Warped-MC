// Copyright (c) 2009 by Tor M. Aamodt, Tim Rogers and 
// The University of British Columbia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.
// Neither the name of The University of British Columbia nor the names of its
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

MF_TUP_BEGIN( mem_fetch_status )
    MF_TUP( MEM_FETCH_INITIALIZED ),
    MF_TUP( IN_L1I_MISS_QUEUE ),
    MF_TUP( IN_L1D_MISS_QUEUE ),
    MF_TUP( IN_L1T_MISS_QUEUE ),
    MF_TUP( IN_L1C_MISS_QUEUE ),
    MF_TUP( IN_L1TLB_MISS_QUEUE ),
    MF_TUP( IN_VM_MANAGER_QUEUE ),
    MF_TUP( IN_L1D_ACCESS ), //L1D_access
    MF_TUP( IN_CACHE_ACCESS ), // JH : constant, texture cache access
    MF_TUP( IN_ICNT_TO_MEM ), // JH : L1D cache to icnt
    MF_TUP( IN_PARTITION_ROP_DELAY ),  // JH : not texture L2, push to ROP delay queue from icnt
    MF_TUP( IN_PARTITION_ICNT_TO_L2_QUEUE ), // JH : push to icnt to L2 queue from ROP delay queue
    MF_TUP( IN_PARTITION_L2_TO_DRAM_QUEUE ), // JH : push to L2 to dram queue from icnt to L2 queue
                                             //      L2 mshr 
    MF_TUP( IN_PARTITION_DRAM_LATENCY_QUEUE ), // JH : push back to dram latency queue (pop from L2 to dram queue)
    MF_TUP( IN_PARTITION_L2_MISS_QUEUE ),
    MF_TUP( IN_PARTITION_MC_INTERFACE_QUEUE ), // JH : push to DRAM pending queue from L2 to dram queue
    MF_TUP( IN_PARTITION_MC_INPUT_QUEUE ),  // JH : push to sorted row queue in bank from DRAM pending queue, 
                                            //      it's performed at the same cycele as memory request 
                                            //      push to DRAM pending queue
    MF_TUP( IN_PARTITION_MC_BANK_ARB_QUEUE ), // JH : schedule a row hit request 
    MF_TUP( IN_PARTITION_DRAM ), //JH : issue dram command for serving scheduled request
    MF_TUP( IN_PARTITION_MC_RETURNQ ), // JH : served request push to DRAM return queue
    MF_TUP( IN_PARTITION_DRAM_REPLY ), // JH : if dram to l2 queue full, 
                                       //      it may be different value with IN_PARTITION_DRAM_TO_L2_QUEUE
    MF_TUP( IN_PARTITION_DRAM_TO_L2_QUEUE ), // JH : push to dram to l2 queue from DRAM return queue
    MF_TUP( IN_PARTITION_L2_FILL_QUEUE ),
    MF_TUP( IN_PARTITION_L2_TO_ICNT_QUEUE ),
    MF_TUP( IN_ICNT_TO_SHADER ),
    MF_TUP( IN_CLUSTER_TO_SHADER_QUEUE ),
    MF_TUP( IN_SHADER_LDST_RESPONSE_FIFO ),
    MF_TUP( IN_SHADER_FETCHED ),
    MF_TUP( IN_SHADER_L1T_ROB ),
    MF_TUP( MEM_FETCH_DELETED ),
    MF_TUP( NUM_MEM_REQ_STAT )
MF_TUP_END( mem_fetch_status )
